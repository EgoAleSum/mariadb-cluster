{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D1_v2",
      "metadata": {
        "description": "Instance size for the VMs"
      }
    },
    "storageAccountNamePrefix": {
      "type": "string",
      "maxLength": 7,
      "metadata": {
        "description": "Name prefix for the storage accounts"
      }
    },
    "numberOfNodes": {
      "type": "int",
      "defaultValue": 3,
      "minValue": 3,
      "maxValue": 5, 
      "metadata": {
        "description": "Number of nodes to create"
      }
    },
    "adminUserName": {
      "type": "string",
      "defaultValue": "core",
      "metadata": {
        "description": "Username to login to the VMs"
      }
    },
    "sshKeyData": {
      "type": "string",
      "metadata": {
        "description": "Public key for SSH authentication"
      }
    },
    "cloudConfig": {
      "type": "string",
      "metadata": {
        "description": "Base64-encoded cloud-config.yaml file"
      }
    }
  },
  "variables": {
    "securityGroupName": "mariadb-nsg",
    "virtualNetworkName": "[concat( resourceGroup().name, '-VNet' )]",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "mariadb-subnet",
    "subnet1Prefix": "10.0.1.0/24",
    "subnet1Ref": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), '/subnets/', variables('subnet1Name'))]",
    "vmNamePrefix": "mariadb-node-",
    "osImageSku": "Stable",
    "nicNamePrefix": "mariadb-nic-",
    "availabilitySetName": "mariadb-as",
    "vhdStorageAccountName": "[toLower( concat( parameters('storageAccountNamePrefix'), 'vhdo', uniqueString(resourceGroup().id) ) )]",
    "vhdStorageAccountType": "Standard_LRS",
    "diagStorageAccountName": "[toLower( concat( parameters('storageAccountNamePrefix'), 'diag', uniqueString(resourceGroup().id) ) )]",
    "diagStorageAccountType": "Standard_LRS",
    "sshKeyPath": "[concat('/home/', parameters('adminUsername'),'/.ssh/authorized_keys')]",
    "loadBalancerIp": "10.0.1.4",
    "loadBalancerName": "mariadb-lb",
    "backendPoolName": "BackendPoolMySQL",
    "backendPoolRef": "[concat(resourceId('Microsoft.Network/loadBalancers/', variables('loadBalancerName')), '/backendAddressPools/', variables('backendPoolName'))]",
    "lbRef": "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
    "lbRuleName": "MySQL-Rule",
    "lbProbeName": "MySQL-Probe"
  },
  "resources": [
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('vhdStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('vhdStorageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('diagStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('diagStorageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('securityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "SSH",
            "properties": {
              "description": "Allows SSH traffic from the Virtual Network",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationPortRange": "22",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "MySQL",
            "properties": {
              "description": "Allows MySQL traffic from the Virtual Network",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationPortRange": "3306",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('nicNamePrefix'), copyindex())]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfNodes')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('securityGroupName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[variables('backendPoolRef')]"
                }
              ]
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('securityGroupName'))]"
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "location": "[resourceGroup().location]"
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontend",
            "properties": {
              "subnet": {
                "id": "[variables('subnet1Ref')]"
              },
              "privateIPAddress": "[variables('loadBalancerIp')]",
              "privateIPAllocationMethod": "Static"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('backendPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[variables('lbRuleName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(variables('lbRef'), '/frontendIpConfigurations/LoadBalancerFrontend')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('lbRef'), '/backendAddressPools/', variables('backendPoolName'))]"
              },
              "probe": {
                "id": "[concat(variables('lbRef'), '/probes/', variables('lbProbeName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": 3306,
              "backendPort": 3306,
              "idleTimeoutInMinutes": 15
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('lbProbeName')]",
            "properties": {
              "protocol": "Tcp",
              "port": 3306,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNamePrefix'), copyindex())]",
      "copy": {
        "name": "vmLoop",
        "count": "[parameters('numberOfNodes')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('vhdStorageAccountName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('diagStorageAccountName'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNamePrefix'), copyindex())]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNamePrefix'), copyindex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "customData": "[parameters('cloudConfig')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshKeyData')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "CoreOS",
            "offer": "CoreOS",
            "sku": "[variables('osImageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNamePrefix'), copyindex())]",
            "vhd": {
              "uri": "[concat('http://',variables('vhdStorageAccountName'),'.blob.core.windows.net/vhds/',variables('vmNamePrefix'), copyindex(),'-OS', '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('nicNamePrefix'), copyindex()))]"
            }
          ]
        },
         "diagnosticsProfile": {
          "bootDiagnostics": {
             "enabled": "true",
             "storageUri": "[concat('http://',variables('diagStorageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    }
  ]
}
